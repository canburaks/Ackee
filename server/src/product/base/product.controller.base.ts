/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProductService } from "../product.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ProductCreateInput } from "./ProductCreateInput";
import { ProductWhereInput } from "./ProductWhereInput";
import { ProductWhereUniqueInput } from "./ProductWhereUniqueInput";
import { ProductFindManyArgs } from "./ProductFindManyArgs";
import { ProductUpdateInput } from "./ProductUpdateInput";
import { Product } from "./Product";
import { CollectionFindManyArgs } from "../../collection/base/CollectionFindManyArgs";
import { Collection } from "../../collection/base/Collection";
import { CollectionWhereUniqueInput } from "../../collection/base/CollectionWhereUniqueInput";
import { TagFindManyArgs } from "../../tag/base/TagFindManyArgs";
import { Tag } from "../../tag/base/Tag";
import { TagWhereUniqueInput } from "../../tag/base/TagWhereUniqueInput";
import { VariantFindManyArgs } from "../../variant/base/VariantFindManyArgs";
import { Variant } from "../../variant/base/Variant";
import { VariantWhereUniqueInput } from "../../variant/base/VariantWhereUniqueInput";
@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ProductControllerBase {
  constructor(
    protected readonly service: ProductService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "create",
    possession: "any",
  })
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Product })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(@common.Body() data: ProductCreateInput): Promise<Product> {
    return await this.service.create({
      data: {
        ...data,

        artist: data.artist
          ? {
              connect: data.artist,
            }
          : undefined,
      },
      select: {
        artist: {
          select: {
            id: true,
          },
        },

        artistName: true,
        artistWikidata: true,
        artworkWikidata: true,
        createdAt: true,
        description: true,
        featuredImage: true,
        handle: true,
        hasOnlyDefaultVariant: true,
        id: true,
        images: true,
        metaDescription: true,
        metafields: true,
        metaTitle: true,
        orientation: true,
        status: true,
        storefrontId: true,
        title: true,
        translations: true,
        updatedAt: true,
        variants: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  @common.Get()
  @swagger.ApiOkResponse({ type: [Product] })
  @swagger.ApiForbiddenResponse()
  @ApiNestedQuery(ProductFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Product[]> {
    const args = plainToClass(ProductFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        artist: {
          select: {
            id: true,
          },
        },

        artistName: true,
        artistWikidata: true,
        artworkWikidata: true,
        createdAt: true,
        description: true,
        featuredImage: true,
        handle: true,
        hasOnlyDefaultVariant: true,
        id: true,
        images: true,
        metaDescription: true,
        metafields: true,
        metaTitle: true,
        orientation: true,
        status: true,
        storefrontId: true,
        title: true,
        translations: true,
        updatedAt: true,
        variants: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "own",
  })
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Product })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<Product | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        artist: {
          select: {
            id: true,
          },
        },

        artistName: true,
        artistWikidata: true,
        artworkWikidata: true,
        createdAt: true,
        description: true,
        featuredImage: true,
        handle: true,
        hasOnlyDefaultVariant: true,
        id: true,
        images: true,
        metaDescription: true,
        metafields: true,
        metaTitle: true,
        orientation: true,
        status: true,
        storefrontId: true,
        title: true,
        translations: true,
        updatedAt: true,
        variants: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Product })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() data: ProductUpdateInput
  ): Promise<Product | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          artist: data.artist
            ? {
                connect: data.artist,
              }
            : undefined,
        },
        select: {
          artist: {
            select: {
              id: true,
            },
          },

          artistName: true,
          artistWikidata: true,
          artworkWikidata: true,
          createdAt: true,
          description: true,
          featuredImage: true,
          handle: true,
          hasOnlyDefaultVariant: true,
          id: true,
          images: true,
          metaDescription: true,
          metafields: true,
          metaTitle: true,
          orientation: true,
          status: true,
          storefrontId: true,
          title: true,
          translations: true,
          updatedAt: true,
          variants: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "delete",
    possession: "any",
  })
  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Product })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<Product | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          artist: {
            select: {
              id: true,
            },
          },

          artistName: true,
          artistWikidata: true,
          artworkWikidata: true,
          createdAt: true,
          description: true,
          featuredImage: true,
          handle: true,
          hasOnlyDefaultVariant: true,
          id: true,
          images: true,
          metaDescription: true,
          metafields: true,
          metaTitle: true,
          orientation: true,
          status: true,
          storefrontId: true,
          title: true,
          translations: true,
          updatedAt: true,
          variants: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Collection",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/collections")
  @ApiNestedQuery(CollectionFindManyArgs)
  async findManyCollections(
    @common.Req() request: Request,
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<Collection[]> {
    const query = plainToClass(CollectionFindManyArgs, request.query);
    const results = await this.service.findCollections(params.id, {
      ...query,
      select: {
        createdAt: true,
        data: true,
        description: true,
        handle: true,
        id: true,
        image: true,
        metaDescription: true,
        metaTitle: true,
        status: true,
        title: true,
        translations: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/collections")
  async connectCollections(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: CollectionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      collections: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/collections")
  async updateCollections(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: CollectionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      collections: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/collections")
  async disconnectCollections(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: CollectionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      collections: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Tag",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/tags")
  @ApiNestedQuery(TagFindManyArgs)
  async findManyTags(
    @common.Req() request: Request,
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<Tag[]> {
    const query = plainToClass(TagFindManyArgs, request.query);
    const results = await this.service.findTags(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        handle: true,
        id: true,
        metaDescription: true,
        metaTitle: true,
        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/tags")
  async connectTags(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: TagWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tags: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/tags")
  async updateTags(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: TagWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tags: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/tags")
  async disconnectTags(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: TagWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tags: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Variant",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/variant")
  @ApiNestedQuery(VariantFindManyArgs)
  async findManyVariant(
    @common.Req() request: Request,
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<Variant[]> {
    const query = plainToClass(VariantFindManyArgs, request.query);
    const results = await this.service.findVariant(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        name: true,
        option: true,

        product: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/variant")
  async connectVariant(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: VariantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      variant: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/variant")
  async updateVariant(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: VariantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      variant: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/variant")
  async disconnectVariant(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: VariantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      variant: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
